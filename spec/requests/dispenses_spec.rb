require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/dispenses", type: :request do

  
  # This should return the minimal set of attributes required to create a valid
  # Dispense. As you add validations to Dispense, be sure to
  # adjust the attributes here as well.
  # let(:valid_attributes) {
  #   skip("Add a hash of attributes valid for your model")
  # }

  # let(:invalid_attributes) {
  #   skip("Add a hash of attributes invalid for your model")
  # }

  # # This should return the minimal set of values that should be in the headers
  # # in order to pass any filters (e.g. authentication) defined in
  # # DispensesController, or in your router and rack
  # # middleware. Be sure to keep this updated too.
  # let(:valid_headers) {
  #   {}
  # }

  # describe "GET /index" do
  #   it "renders a successful response" do
  #     Dispense.create! valid_attributes
  #     get dispenses_url, headers: valid_headers, as: :json
  #     expect(response).to be_successful
  #   end
  # end

  # describe "GET /show" do
  #   it "renders a successful response" do
  #     dispense = Dispense.create! valid_attributes
  #     get dispense_url(dispense), as: :json
  #     expect(response).to be_successful
  #   end
  # end

  # describe "POST /create" do
  #   context "with valid parameters" do
  #     it "creates a new Dispense" do
  #       expect {
  #         post dispenses_url,
  #              params: { dispense: valid_attributes }, headers: valid_headers, as: :json
  #       }.to change(Dispense, :count).by(1)
  #     end

  #     it "renders a JSON response with the new dispense" do
  #       post dispenses_url,
  #            params: { dispense: valid_attributes }, headers: valid_headers, as: :json
  #       expect(response).to have_http_status(:created)
  #       expect(response.content_type).to match(a_string_including("application/json"))
  #     end
  #   end

  #   context "with invalid parameters" do
  #     it "does not create a new Dispense" do
  #       expect {
  #         post dispenses_url,
  #              params: { dispense: invalid_attributes }, as: :json
  #       }.to change(Dispense, :count).by(0)
  #     end

  #     it "renders a JSON response with errors for the new dispense" do
  #       post dispenses_url,
  #            params: { dispense: invalid_attributes }, headers: valid_headers, as: :json
  #       expect(response).to have_http_status(:unprocessable_entity)
  #       expect(response.content_type).to match(a_string_including("application/json"))
  #     end
  #   end
  # end

  # describe "PATCH /update" do
  #   context "with valid parameters" do
  #     let(:new_attributes) {
  #       skip("Add a hash of attributes valid for your model")
  #     }

  #     it "updates the requested dispense" do
  #       dispense = Dispense.create! valid_attributes
  #       patch dispense_url(dispense),
  #             params: { dispense: new_attributes }, headers: valid_headers, as: :json
  #       dispense.reload
  #       skip("Add assertions for updated state")
  #     end

  #     it "renders a JSON response with the dispense" do
  #       dispense = Dispense.create! valid_attributes
  #       patch dispense_url(dispense),
  #             params: { dispense: new_attributes }, headers: valid_headers, as: :json
  #       expect(response).to have_http_status(:ok)
  #       expect(response.content_type).to match(a_string_including("application/json"))
  #     end
  #   end

  #   context "with invalid parameters" do
  #     it "renders a JSON response with errors for the dispense" do
  #       dispense = Dispense.create! valid_attributes
  #       patch dispense_url(dispense),
  #             params: { dispense: invalid_attributes }, headers: valid_headers, as: :json
  #       expect(response).to have_http_status(:unprocessable_entity)
  #       expect(response.content_type).to match(a_string_including("application/json"))
  #     end
  #   end
  # end

  # describe "DELETE /destroy" do
  #   it "destroys the requested dispense" do
  #     dispense = Dispense.create! valid_attributes
  #     expect {
  #       delete dispense_url(dispense), headers: valid_headers, as: :json
  #     }.to change(Dispense, :count).by(-1)
  #   end
  # end
end
